import React, { useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Camera, Plus, TrendingUp, Calendar } from 'lucide-react';
import { useQuery } from '@tanstack/react-query';
import useAppStore from '../stores/useAppStore';
import { statsAPI, mealsAPI } from '../services/api';
import './Dashboard.css';

const Dashboard = () => {
  const { user, nutritionProfile } = useAppStore();
  
  // Fetch today's stats
  const { data: dailyStats, isLoading: statsLoading } = useQuery({
    queryKey: ['dailyStats', new Date().toISOString().split('T')[0]],
    queryFn: () => statsAPI.getDaily(),
  });
  
  // Fetch today's meals
  const { data: todayMeals, isLoading: mealsLoading } = useQuery({
    queryKey: ['todayMeals'],
    queryFn: () => mealsAPI.getTodayMeals(),
  });
  
  const stats = dailyStats?.stats || {
    calories: { consumed: 0, target: 2000, percentage: 0 },
    proteins: { consumed: 0, target: 150, percentage: 0 },
    fats: { consumed: 0, target: 65, percentage: 0 },
    carbs: { consumed: 0, target: 250, percentage: 0 },
  };
  
  return (
    <div className="dashboard">
      <header className="dashboard-header">
        <div className="greeting">
          <h1>–ü—Ä–∏–≤–µ—Ç, {user?.first_name}! üëã</h1>
          <p>{new Date().toLocaleDateString('ru-RU', { weekday: 'long', day: 'numeric', month: 'long' })}</p>
        </div>
      </header>
      
      <main className="dashboard-content">
        {/* Quick Actions */}
        <section className="quick-actions">
          <Link to="/camera" className="action-card primary">
            <Camera size={32} />
            <div>
              <h3>–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É</h3>
              <p>AI —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –∏ –ø–æ–¥—Å—á–∏—Ç–∞–µ—Ç –∫–∞–ª–æ—Ä–∏–∏</p>
            </div>
          </Link>
          
          <Link to="/diary" className="action-card secondary">
            <Plus size={32} />
            <div>
              <h3>–î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é</h3>
              <p>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –±–∞–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤</p>
            </div>
          </Link>
        </section>
        
        {/* Today's Progress */}
        <section className="today-progress">
          <h2>–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</h2>
          
          {statsLoading ? (
            <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
          ) : (
            <div className="progress-cards">
              {/* Calories Card */}
              <div className="progress-card calories">
                <div className="progress-header">
                  <span className="label">–ö–∞–ª–æ—Ä–∏–∏</span>
                  <span className="percentage">{stats.calories.percentage}%</span>
                </div>
                <div className="progress-bar">
                  <div 
                    className="progress-fill"
                    style={{ width: `${Math.min(stats.calories.percentage, 100)}%` }}
                  />
                </div>
                <div className="progress-values">
                  <span className="consumed">{stats.calories.consumed}</span>
                  <span className="separator">/</span>
                  <span className="target">{stats.calories.target} –∫–∫–∞–ª</span>
                </div>
              </div>
              
              {/* Macros Grid */}
              <div className="macros-grid">
                {/* Proteins */}
                <div className="macro-card">
                  <div className="macro-icon proteins">–ë</div>
                  <div className="macro-info">
                    <span className="macro-label">–ë–µ–ª–∫–∏</span>
                    <span className="macro-value">{stats.proteins.consumed}–≥</span>
                    <div className="macro-progress">
                      <div 
                        className="macro-progress-fill"
                        style={{ width: `${Math.min(stats.proteins.percentage, 100)}%` }}
                      />
                    </div>
                  </div>
                </div>
                
                {/* Fats */}
                <div className="macro-card">
                  <div className="macro-icon fats">–ñ</div>
                  <div className="macro-info">
                    <span className="macro-label">–ñ–∏—Ä—ã</span>
                    <span className="macro-value">{stats.fats.consumed}–≥</span>
                    <div className="macro-progress">
                      <div 
                        className="macro-progress-fill"
                        style={{ width: `${Math.min(stats.fats.percentage, 100)}%` }}
                      />
                    </div>
                  </div>
                </div>
                
                {/* Carbs */}
                <div className="macro-card">
                  <div className="macro-icon carbs">–£</div>
                  <div className="macro-info">
                    <span className="macro-label">–£–≥–ª–µ–≤–æ–¥—ã</span>
                    <span className="macro-value">{stats.carbs.consumed}–≥</span>
                    <div className="macro-progress">
                      <div 
                        className="macro-progress-fill"
                        style={{ width: `${Math.min(stats.carbs.percentage, 100)}%` }}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </section>
        
        {/* Recent Meals */}
        <section className="recent-meals">
          <div className="section-header">
            <h2>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏</h2>
            <Link to="/diary" className="see-all">–í—Å–µ ‚Üí</Link>
          </div>
          
          {mealsLoading ? (
            <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
          ) : todayMeals?.meals?.length > 0 ? (
            <div className="meals-list">
              {todayMeals.meals.slice(0, 3).map((meal) => (
                <div key={meal.id} className="meal-item">
                  <div className="meal-time">
                    {new Date(meal.consumed_at).toLocaleTimeString('ru-RU', { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </div>
                  <div className="meal-info">
                    <h4>{getMealTypeName(meal.meal_type)}</h4>
                    <p>{meal.items.length} –±–ª—é–¥</p>
                  </div>
                  <div className="meal-calories">
                    {meal.totals.calories} –∫–∫–∞–ª
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="empty-state">
              <Calendar size={48} />
              <p>–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ —Å–µ–≥–æ–¥–Ω—è</p>
            </div>
          )}
        </section>
        
        {/* Tips */}
        {!nutritionProfile && (
          <section className="tips-card">
            <TrendingUp size={24} />
            <div>
              <h3>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–∏—Ç–∞–Ω–∏—è</h3>
              <p>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã</p>
            </div>
            <Link to="/profile" className="tips-button">
              –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
            </Link>
          </section>
        )}
      </main>
    </div>
  );
};

// Helper function
const getMealTypeName = (type) => {
  const types = {
    breakfast: '–ó–∞–≤—Ç—Ä–∞–∫',
    lunch: '–û–±–µ–¥',
    dinner: '–£–∂–∏–Ω',
    snack: '–ü–µ—Ä–µ–∫—É—Å',
  };
  return types[type] || type;
};

export default Dashboard;